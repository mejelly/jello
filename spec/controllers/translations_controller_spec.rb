require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TranslationsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Translation. As you add validations to Translation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.build(:translation).attributes
  }

  let(:invalid_attributes) {
    FactoryGirl.build(:invalid_translation).attributes
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TranslationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    valid_auth0_login_setup
    request.env['omniauth.auth'] = OmniAuth.config.mock_auth[:auth0]
    auth0 = Auth0Controller.new
    auth0.request = request
    auth0.response = response
    auth0.callback
    FactoryGirl.create(:article_1)
  end

  describe "GET #index" do
    it "assigns all translations as @translations" do
      translation = FactoryGirl.create(:translation)
      get :index, session: valid_session
      expect(assigns(:translations)).to eq([translation])
    end
  end

  describe "GET #show" do
    it "assigns the requested translation as @translation" do
      gist = File.join(Rails.root, 'spec/controllers/test_data/gist.json')
      stub_request(:get, 'http://gist.mejelly.com:8000/gists/123456').
          to_return(body: File.read(gist))
      gist_comment = File.join(Rails.root, 'spec/controllers/test_data/gist_comment.json')
      stub_request(:get, "http://gist.mejelly.com:8000/gists/123456/comments").
          to_return(body: File.read(gist_comment))
      translation = Translation.create! valid_attributes
      get :show, params: { id: translation.to_param }, session: valid_session
      expect(assigns(:translations)).to eq(@translation)
    end
  end

  describe "POST #create", clean_as_group: true do
    context "with valid params" do
      it "creates a new Translation" do
        expect {
          post :create, params: {translation: valid_attributes}, session: valid_session
        }.to change(Translation, :count).by(1)
      end

      it "assigns a newly created translation as @translation" do
        post :create, params: {translation: valid_attributes}, session: valid_session
        expect(assigns(:translation)).to be_a(Translation)
        expect(assigns(:translation)).to be_persisted
      end

      it "redirects to the created translation" do
        post :create, params: { translation: valid_attributes }, session: valid_session
        expect(response).to redirect_to(Translation.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved translation as @translation" do
        post :create, params: { translation: invalid_attributes }, session: valid_session
        expect(assigns(:translation)).to be_a_new(Translation)
      end

      it "re-renders the 'new' template" do
        post :create, params: { translation: invalid_attributes }, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested translation" do
      translation = Translation.create! valid_attributes
      expect {
        delete :destroy, params: { id: translation.to_param }, session: valid_session
      }.to change(Translation, :count).by(-1)
    end

    it "redirects to the translations list" do
      translation = Translation.create! valid_attributes
      delete :destroy, params: { id: translation.to_param }, session: valid_session
      expect(response).to redirect_to(translations_url)
    end
  end

  describe TranslationsController do
    it "Connect GitHub should return json content" do
      VCR.use_cassette 'controller/github' do
        actual = controller.connect_github
        expect(actual).not_to be_nil
      end
    end

    it "get_github_token should return a token" do
      VCR.use_cassette 'controller/github_token' do
        actual = controller.get_github_token
        expect(actual).not_to be_nil
      end
    end

    it "fetch gist should get translated text and filename" do
      VCR.use_cassette 'controller/gist_text' do
        @github_token = controller.get_github_token
        params[:article_id]
        # @current_gist_id = '4a88aaac27a90e782bb1e866ed1ab5fe'
        actual = controller.fetch_gist
        expect(actual).not_to be_nil
      end
    end

    it "list comments should return comments" do
      VCR.use_cassette 'controller/list_comments' do
        @github_token = controller.get_github_token
        controller.instance_variable_set(:@current_gist_id, '4a88aaac27a90e782bb1e866ed1ab5fe')
        actual = controller.fetch_gist
        expect(actual).not_to be_nil
      end
    end
  end
end
